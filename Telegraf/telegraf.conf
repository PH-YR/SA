# Seção global de tags (opcional, mas útil para identificar máquinas)
[global_tags]
  # Você pode usar a tag 'host' para o hostname da máquina, o Telegraf já faz isso por padrão,
  # mas se quiser um nome mais amigável, pode definir aqui ou no [agent]
  # environment = "producao"
  # location = "escritorio_local"

# Configuração do agente Telegraf
[agent]
  ## Intervalo padrão para todas as entradas, a menos que sobrescrito
  interval = "15s" # Definimos para 15s, que é a menor frequência para CPU/RAM
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  #hostname = "$HOSTNAME" # Usa o hostname da máquina como tag "host"
  # flush_interval = "10s" # Frequência para enviar os dados para os outputs

# Seção de outputs (enviando para o InfluxDB Local, como já configurado)
[[outputs.influxdb]]
  urls = ["http://192.168.248.129:8086"] # Seu InfluxDB local no Ubuntu
  database = "AMD" # Seu banco de dados
  # Você não precisa configurar um segundo output aqui se a "Forma 2" for usada,
  # pois o InfluxDB local será o intermediário para o remoto.

###############################################################################
#                           INPUTS - Coleta de Dados                          #
###############################################################################

# CPU Usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
  #interval = "15s" # Explicitamente a cada 15 segundos

# RAM Usage
[[inputs.mem]]
  #interval = "15s" # Explicitamente a cada 15 segundos

# Temperatura (Requer Win_Perf_Counters ou outro plugin específico)
# No Windows, a temperatura da CPU/GPU não é facilmente acessível via Performance Counters padrão.
# Geralmente, requer software de terceiros (como HWMonitor, SpeedFan) ou WMI queries específicas.
# O Telegraf pode usar o plugin 'win_perf_counters' para ler dados específicos
# do sistema de performance do Windows, mas a temperatura geralmente não é exposta diretamente lá.
# Se você tiver um sensor específico que expõe a temperatura via WMI, podemos tentar.
# Exemplo de win_perf_counters (para outros dados, não temperatura diretamente):
# [[inputs.win_perf_counters]]
#   [[inputs.win_perf_counters.object]]
#     # Exemplo: Uso de CPU por processo (não é temperatura, mas mostra o uso do plugin)
#     ObjectName = "Process"
#     Counters = ["% Processor Time"]
#     Instances = ["*"]
#     Measurement = "win_proc_cpu"
#     interval = "15s"

# Para temperatura, a abordagem mais comum e robusta para Windows com Telegraf
# seria integrar com uma ferramenta como 'Open Hardware Monitor' ou 'HWMonitor'
# que pode expor esses dados via WMI ou outra interface que o Telegraf possa ler.
# Alternativamente, plugins de terceiros para Telegraf ou scripts externos seriam necessários.
# Por enquanto, focaremos nos dados do sistema que são nativamente acessíveis.
# Se a temperatura for crítica, teremos que pesquisar como sua máquina expõe esses dados.

## Coleta a cada 12 horas: Saúde do Disco, Espaço Disponível

# Disk Usage (Espaço Disponível e Saúde Básica - ex: leitura/escrita)
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]
  # Para Windows, você pode especificar os discos diretamente:
  mount_points = ["C:"] # <--- DESCOMENTE E MANTENHA ASSIM (minúsculas e sem barra no final)
  fielddrop = ["inodes_free", "inodes_total", "inodes_used", "inodes_used_percent"]
  #interval = "12h" # Coleta a cada 12 horas (720 minutos * 60 segundos)

# Read metrics from the output of external commands
[[inputs.exec]]
  commands = [
    "powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -File \"C:\\Program Files\\Telegraf\\scripts\\crystal.ps1\""
  ]
  data_format = "json"
  json_query = "disks"
  name_override = "crystal_disk"
  timeout = "30s"
  tag_keys = ["Model", "SerialNumber", "host", "HealthStatus"]

# Open Hardware Monitor Temperatures & Load via Console Reporter
[[inputs.exec]]
  commands = [
    "powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -File \"C:\\Program Files\\Telegraf\\scripts\\get_ohm_full_report.ps1\""
  ]
  data_format = "json"
  name_override = "OHM"
  timeout = "60s" # Pode demorar um pouco para parsear o relatório completo
  interval = "720h" # Coleta a cada 30 dias (720 horas), pois estas informacoes nao mudam